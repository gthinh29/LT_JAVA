# docker-compose.yml tại thư mục gốc của dự án (task-management-app/)
# Đã xóa dòng version: '3.8' theo khuyến cáo của Docker Compose mới

services:

  # Service cho Database (MySQL)
  db:
    image: mysql:8.0 # Hoặc phiên bản khác, ví dụ: mysql:latest, mysql:5.7
    restart: always # Tự động khởi động lại nếu container dừng
    environment: # Cấu hình biến môi trường cho MySQL Server
      MYSQL_DATABASE: taskdb        # Tên Database sẽ được tạo tự động
      MYSQL_USER: devuser     # Tên người dùng sẽ được tạo tự động
      MYSQL_PASSWORD: devpassword # Mật khẩu cho người dùng trên
      MYSQL_ROOT_PASSWORD: rootpassword # Mật khẩu cho tài khoản root (nên dùng mật khẩu mạnh hơn trong production)
      # Thêm cấu hình để sử dụng phương thức xác thực mysql_native_password
      MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
    ports:
      - "3306:3306" # Mở cổng 3306 của DB ra máy host (tùy chọn nhưng tiện cho dev)
    volumes:
      - db_data:/var/lib/mysql # Lưu trữ dữ liệu DB
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Tùy chọn: script init DB
    healthcheck: # Thêm Healthcheck để kiểm tra DB đã sẵn sàng chưa
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 5s # Kiểm tra mỗi 5 giây
      timeout: 5s # Timeout sau 5 giây nếu không phản hồi
      retries: 5 # Thử lại 5 lần trước khi báo lỗi

  # Service cho Backend (Spring Boot)
  backend:
    build: ./task-management-backend # Build từ Dockerfile trong thư mục backend
    ports:
      - "8080:8080" # Mở cổng 8080 của Backend ra máy host
    environment: # Cấu hình biến môi trường cho ứng dụng Spring Boot
      # Các biến này GHI ĐÈ lên cấu hình trong application.properties nếu cùng tên
      # Đây là cách quản lý cấu hình Database tốt nhất trong Docker Compose
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/taskdb?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: devuser
      SPRING_DATASOURCE_PASSWORD: devpassword
      # Các biến khác (ví dụ: cấu hình Spring Security nếu đặt ở đây)
      # SPRING_SECURITY_USER_NAME: admin
      # SPRING_SECURITY_USER_PASSWORD: adminpassword
    depends_on: # Đảm bảo Backend chờ DB hoàn toàn sẵn sàng
      db:
        condition: service_healthy # Thay vì service_started

  # Service cho Frontend (Next.js)
  frontend:
    build: ./task-management-frontend # Build từ Dockerfile trong thư mục frontend
    ports:
      - "3000:3000" # Mở cổng 3000 của Frontend ra máy host
    environment: # Biến môi trường cho Next.js
      NEXT_PUBLIC_BACKEND_API_URL: http://backend:8080 # Sử dụng tên service 'backend'
    depends_on: # Đảm bảo Frontend chờ Backend khởi động (tùy chọn)
      backend:
        condition: service_started # Có thể đổi thành service_healthy nếu backend có healthcheck
        # Hoặc bỏ depends_on nếu frontend có logic xử lý khi backend chưa sẵn sàng

# Định nghĩa các Docker Volumes được sử dụng
volumes: # Đảm bảo khối này được thêm vào và căn lề ngang hàng với 'services:'
  db_data: # Đảm bảo dòng này được căn lề thụt vào so với 'volumes:'
  # Các volume khác nếu có
